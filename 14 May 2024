using Selenium WebDriver -
launch a browser -
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
// Create an instance of the ChromeDriver
IWebDriver driver = new ChromeDriver();
// Open a URL in the browser
driver.Navigate().GoToUrl("https://www.example.com");

locate elements -
FindElement(By.Id("id"))
FindElement(By.Name("name"))
FindElement(By.XPath("xpath"))
FindElement(By.CssSelector("cssSelector"))

perform actions on elements -
Click()
SendKeys("text")
Clear()
GetAttribute("attribute")

handle dropdowns -
using OpenQA.Selenium.Support.UI;
// Select the dropdown element
IWebElement dropdown = driver.FindElement(By.Id("dropdown"));
// Create a SelectElement instance
SelectElement select = new SelectElement(dropdown);
// Select an option by visible text
select.SelectByText("Option 1");
// Select an option by value
select.SelectByValue("value1");
// Select an option by index
select.SelectByIndex(0);

handle alerts -
SwitchTo()
using OpenQA.Selenium;
// Switch to the alert
IAlert alert = driver.SwitchTo().Alert;
// Accept the alert
alert.Accept();
// Dismiss the alert
alert.Dismiss();
// Get the text of the alert
string alertText = alert.Text;

handle frames -
SwitchTo() method
using OpenQA.Selenium;
// Switch to a frame by index
driver.SwitchTo().Frame(0);
// Switch to a frame by name or ID
driver.SwitchTo().Frame("frameName");
// Switch back to the default content
driver.SwitchTo().DefaultContent();

handle multiple windows or tabs -
SwitchTo() method
using OpenQA.Selenium;
// Get the current window handle
string currentWindowHandle = driver.CurrentWindowHandle;
// Get the handles of all open windows
List<string> windowHandles = driver.WindowHandles.ToList();
// Switch to a new window
driver.SwitchTo().Window(windowHandles[1]);
// Switch back to the original window
driver.SwitchTo().Window(currentWindowHandle);

perform mouse hover actions -
use OpenQA.Selenium.Interactions namespace
using OpenQA.Selenium.Interactions;
// Create an instance of the Actions class
Actions actions = new Actions(driver);
// Move the mouse to the element
actions.MoveToElement(element).Perform();

capture screenshots -
use ITakesScreenshot interface
using OpenQA.Selenium;
// Capture a screenshot
Screenshot screenshot = ((ITakesScreenshot)driver).GetScreenshot();
// Save the screenshot to a file
screenshot.SaveAsFile("path/to/screenshot.png", ScreenshotImageFormat.Png);

handle browser cookies -
using OpenQA.Selenium;
// Get all cookies
var cookies = driver.Manage().Cookies.AllCookies;
// Add a new cookie
driver.Manage().Cookies.AddCookie(new Cookie("name", "value"));
// Delete a cookie
driver.Manage().Cookies.DeleteCookieNamed("cookieName");

perform scrolling -
use JavaScript execution
using OpenQA.Selenium;
// Scroll to the bottom of the page
((IJavaScriptExecutor)driver).ExecuteScript("window.scrollTo(0, document.body.scrollHeight)");
// Scroll to a specific element
((IJavaScriptExecutor)driver).ExecuteScript("arguments[0].scrollIntoView(true);", element);

generate test reports -
Selenium WebDriver with C# does not provide built-in test reporting. However, you can use third-party libraries like NUnit or SpecFlow 
to generate test reports. These frameworks provide features for test organization, assertions, and test result reporting.

handle test data -
Test data can be handled in Selenium WebDriver with C# by using various approaches:
Reading test data from external files like Excel, CSV, or JSON.
Using data providers or test data factories to generate test data dynamically.
Storing test data in variables or constants within the test code.

handle browser navigation -
Navigate().GoToUrl("url")
Navigate().Back()
Navigate().Forward()
Navigate().Refresh()

handle browser window resizing -
using the Manage().Window
using OpenQA.Selenium;
// Maximize the browser window
driver.Manage().Window.Maximize();
// Set the browser window size
driver.Manage().Window.Size = new Size(800, 600);

handle browser authentication prompts -
Selenium WebDriver with C# does not have built-in support for handling browser authentication prompts. 
However, you can include the username and password in the URL itself, like "http://username:password@example.com", 
to bypass the authentication prompt.

handle browser-specific issues -
To handle browser-specific issues in Selenium WebDriver with C#, you can use browser-specific capabilities or options. 
For example, when using ChromeDriver, you can set specific options like --start-maximized for maximizing the browser window 
or --headless for running in headless mode.

handle file uploads -
use the SendKeys() method
IWebElement fileInput = driver.FindElement(By.Id("fileInput"));
fileInput.SendKeys("path/to/file.txt");

if (columnIndex == 2)
{
    formulas = $"IFERROR(IF(VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0) = \"\", \"-\", VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)), \"-\")";
}
else
{
    formulas = $"VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)";
}

rowXero++;
rowDIBB++;




 ........

if (columnIndex == 2)
{
    formulas = $"IFERROR(IF(VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0) = \"\", \"-\", VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)), \"-\")";
}
else
{
    formulas = $"VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)";
}

rowXero++;
rowDIBB++;

........

if (columnIndex == 2)
{
    formulas = $"IFERROR(IF(VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0) = \"\", \"-\", IF(ISBLANK(VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)), \"-\", VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0))), \"-\")";
}
else
{
    formulas = $"VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)";
}

rowXero++;
rowDIBB++;

,.........

if (columnIndex == 2)
{
    formulas = $"IFERROR(IF(VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0) = \"\", \"-\", VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)), \"-\")";
}
else
{
    formulas = $"VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)";
}

rowXero++;
rowDIBB++;

........

if (columnIndex == 2)
{
    string lookupFormula = $"VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)";
    formulas = $"IFERROR(IF(LEN({lookupFormula}) = 0, \"-\", {lookupFormula}), \"-\")";
}
else
{
    formulas = $"VLOOKUP(A{rowXero}, '{xeroSheetName}'!$J$9:$K${sheetXERO.LastRowNum - 83}, 2, 0)";
}

rowXero++;
rowDIBB++;

........

formulas = $"IFERROR(IF(OR(ISBLANK(B{rowAdd}), ISBLANK(C{rowAdd})), \"-\", B{rowAdd} + C{rowAdd}), \"-\")";

.....

for (int i = 0; i < numberOfRows; i++)
{
    IRow newRow = sheet.CreateRow(i);

    for (int j = 0; j < 12; j++)
    {
        ICell newCell = newRow.CreateCell(j);

        // Assuming item is an object containing data for the row
        // You can replace item.EntryId, item.Property1, etc., with actual values or logic
        if (j == 0)
        {
            newCell.SetCellValue(item.EntryId);
            newCell.CellStyle = numberStyle2;
        }
        else if (j >= 1 && j <= 6)
        {
            // Replace item.Property1, item.Property2, etc., with actual values
            string cellValue = item.GetType().GetProperty($"Property{j}").GetValue(item, null)?.ToString();

            if (string.IsNullOrEmpty(cellValue))
            {
                newCell.SetCellValue("-");
            }
            else
            {
                newCell.SetCellValue(cellValue);
            }

            // Apply styles as needed
            newCell.CellStyle = textStyle; // or any other style you want to apply
        }

.......

int getTransSummarySheet = sheet.LastRowNum + 1;
int lastRowForTrans = sheet.LastRowNum + comapreEntryId.Count;

var totalItemListGroupBy = bookingSheetEntryId.GroupBy(g => g.EntryId);

foreach (var item in comapreEntryId)
{
    for (int rowIndexTrans = getTransSummarySheet; rowIndexTrans <= lastRowForTrans; rowIndexTrans++)
    {
        IRow row = sheet.CreateRow(rowIndexTrans);

        for (int colIndex = 0; colIndex < 12; colIndex++)
        {
            ICell cell = row.CreateCell(colIndex);

            if (colIndex == 0)
            {
                cell.SetCellValue(item.EntryId);
                cell.CellStyle = numberStyle2;
            }
            else if (colIndex >= 1 && colIndex <= 6)
            {
                // Replace the below logic to fetch the correct property based on your data structure
                // Assuming `item` has properties named Property1, Property2, ..., Property6
                string propertyName = $"Property{colIndex}";
                var propertyValue = item.GetType().GetProperty(propertyName)?.GetValue(item, null)?.ToString();

                if (string.IsNullOrEmpty(propertyValue))
                {
                    cell.SetCellValue("-");
                }
                else
                {
                    cell.SetCellValue(propertyValue);
                }

                // Apply the desired cell style
                cell.CellStyle = textStyle; // Use your specific style here
            }
        }

        getTransSummarySheet++;
        break; // This break will exit the foreach loop after the first iteration
    }
}
       â¬¤