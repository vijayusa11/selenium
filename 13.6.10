To implement the `SaveTemplateAttachment` method for both Azure and local storage, we can follow a similar structure to the `SaveTicketAttachment` method. Here's how you can modify your `SaveTemplateAttachment` method to handle both Azure and local storage:

```csharp
private void SaveTemplateAttachment(HttpRequest templateAttachmentRequest, Int16 templateId, bool isEdit)
{
    if (ConfigurationManager.AppSettings["Azure_Attachment"] == "1")
    {
        BLAzureCommonAPI bLAzureCommonAPI = new BLAzureCommonAPI();
        if (templateAttachmentRequest.Files.Count > 0)
        {
            for (int i = 0; i < templateAttachmentRequest.Files.AllKeys.Length; i++)
            {
                HttpPostedFile attachmentFile = templateAttachmentRequest.Files[i];
                if (attachmentFile != null)
                {
                    string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
                    TemplateAttachmentDto attachmentDto = new TemplateAttachmentDto()
                    {
                        TemplateId = templateId,
                        TemplateAttachmentId = 0,
                        FileName = attachmentFile.FileName,
                        FilePath = Path.Combine("Upload/Template/" + Datefolderpath + templateId, attachmentFile.FileName),
                    };
                    Int32 templateAttachmentId = _templateRepository.SaveTemplateAttachment(attachmentDto);

                    var folderPath = "Upload/Template/" + Datefolderpath + templateId + "/" + templateAttachmentId;

                    AzureSaveSingleFileDto azureSaveSingleFile = new AzureSaveSingleFileDto()
                    {
                        ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"].ToString(),
                        FileName = attachmentFile.FileName,
                        SavePath = folderPath,
                        FileBytes = bLAzureCommonAPI.ConvertStreamToByte(attachmentFile.InputStream, attachmentFile.ContentLength),
                    };
                    bLAzureCommonAPI.SaveSingleFile(azureSaveSingleFile);
                }
            }
        }

        if (isEdit)
        {
            string attachmentIds = templateAttachmentRequest["attachmentIds"];
            if (!String.IsNullOrEmpty(attachmentIds))
            {
                string[] arr = attachmentIds.Split(',');
                foreach (var item in arr)
                {
                    RemoveTemplateAttachment(Convert.ToInt16(item), templateId);
                }
            }
        }
    }
    else
    {
        if (templateAttachmentRequest.Files.Count > 0)
        {
            for (int i = 0; i < templateAttachmentRequest.Files.AllKeys.Length; i++)
            {
                HttpPostedFile attachmentFile = templateAttachmentRequest.Files[i];
                if (attachmentFile != null)
                {
                    string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
                    TemplateAttachmentDto attachmentDto = new TemplateAttachmentDto()
                    {
                        TemplateId = templateId,
                        TemplateAttachmentId = 0,
                        FileName = attachmentFile.FileName,
                        FilePath = Path.Combine("~/Upload/Template/" + Datefolderpath + templateId, attachmentFile.FileName),
                    };
                    Int32 templateAttachmentId = _templateRepository.SaveTemplateAttachment(attachmentDto);
                    var folderPath = HttpContext.Current.Server.MapPath("~//Upload/Template/" + Datefolderpath + templateId + "/" + templateAttachmentId);
                    CreateFolderIfNeeded(folderPath);
                    attachmentFile.SaveAs(Path.Combine(folderPath, attachmentFile.FileName));
                }
            }
        }

        if (isEdit)
        {
            string attachmentIds = templateAttachmentRequest["attachmentIds"];
            if (!String.IsNullOrEmpty(attachmentIds))
            {
                string[] arr = attachmentIds.Split(',');
                foreach (var item in arr)
                {
                    RemoveTemplateAttachment(Convert.ToInt16(item), templateId);
                }
            }
        }
    }
}
```

### Explanation:

1. **Azure Storage Handling:**
   - Check if Azure storage is enabled (`ConfigurationManager.AppSettings["Azure_Attachment"] == "1"`).
   - If there are files in the request, iterate through them and create `TemplateAttachmentDto` objects.
   - Save the attachment information in the repository and upload the files to Azure using `BLAzureCommonAPI`.

2. **Local Storage Handling:**
   - If Azure storage is not enabled, handle file uploads and deletions in local storage.
   - Save the files locally using the server's file system (`HttpContext.Current.Server.MapPath`).

3. **Handling Edits:**
   - If the `isEdit` flag is true, parse the `attachmentIds` from the request.
   - Remove the existing attachments by calling `RemoveTemplateAttachment`.

By incorporating these changes, your `SaveTemplateAttachment` method will correctly handle file uploads and deletions for both Azure and local storage scenarios.