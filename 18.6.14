The issues with skipping lines could be due to the conditional checks in `LoadDailyPatientSiteCsvData` not correctly recognizing valid data lines. Let's refine the logic to handle these cases better.

### Refined `LoadDailyPatientSiteCsvData` Method

```csharp
public void LoadDailyPatientSiteCsvData(string filePath, ISheet sheet, XSSFWorkbook workbook, string sheetName)
{
    try
    {
        XSSFCellStyle numberStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        numberStyle.DataFormat = workbook.CreateDataFormat().GetFormat("General");

        XSSFCellStyle dateStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        dateStyle.DataFormat = workbook.CreateDataFormat().GetFormat("dd-MM-yyyy");

        XSSFCellStyle timeStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        timeStyle.DataFormat = workbook.CreateDataFormat().GetFormat("hh:mm:ss");

        using (TextFieldParser reader = new TextFieldParser(filePath))
        {
            reader.HasFieldsEnclosedInQuotes = true;
            reader.SetDelimiters("\t");

            int rowIndex = 0;

            while (!reader.EndOfData)
            {
                var valueLines = reader.ReadFields();

                if (valueLines == null || valueLines.Length < 9)
                {
                    Console.WriteLine("Empty or invalid line encountered.");
                    continue;
                }

                // Debug output for valueLines
                Console.WriteLine("Processing line: " + string.Join(", ", valueLines));

                if (rowIndex == 0)
                {
                    CreateHeaderRow(sheet, numberStyle);
                    rowIndex++;
                }
                else
                {
                    ProcessDataRows(sheet, rowIndex, valueLines, dateStyle, numberStyle, timeStyle);
                    rowIndex++;
                }
            }
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
        throw;
    }
}
```

### Refined `ProcessDataRows` Method

```csharp
void ProcessDataRows(ISheet sheet, int rowIndex, string[] valueLines, XSSFCellStyle dateStyle, XSSFCellStyle numberStyle, XSSFCellStyle timeStyle)
{
    try
    {
        // Debug output for valueLines
        Console.WriteLine("Processing data row: " + string.Join(", ", valueLines));

        // Extracting values from the input line
        string agentValue = valueLines[1]; // Agent name
        string extensionValue = valueLines[0]; // Extension
        string totalTalkingTimeValue = valueLines[8]; // Total Talking Time

        // Create a new row for data
        var dataRow = sheet.CreateRow(rowIndex);

        // Setting Date cell with current date
        var dateCell = dataRow.CreateCell(0);
        dateCell.SetCellValue(DateTime.Now.ToString("dd-MM-yyyy"));
        dateCell.CellStyle = dateStyle;

        // Setting Agent cell
        var agentCell = dataRow.CreateCell(1);
        agentCell.SetCellValue(extensionValue);
        agentCell.CellStyle = numberStyle;

        // Setting TimesheetOwner cell
        var timesheetOwnerCell = dataRow.CreateCell(2);
        timesheetOwnerCell.SetCellValue(agentValue);
        timesheetOwnerCell.CellStyle = numberStyle;

        // Setting Total Talking time cell
        var totalTalkingTimeCell = dataRow.CreateCell(3);
        totalTalkingTimeCell.SetCellValue(totalTalkingTimeValue);
        totalTalkingTimeCell.CellStyle = timeStyle;
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
    }
}
```

### Refined `CreateHeaderRow` Method

```csharp
void CreateHeaderRow(ISheet sheet, XSSFCellStyle style)
{
    try
    {
        // Create a new row at the top of the sheet for the header
        var headerRow = sheet.CreateRow(0);

        // Define the headers
        string[] headers = { "Date", "Agent", "TimesheetOwner", "Total Talking time" };

        // Loop through each header and create a cell in the header row
        for (int i = 0; i < headers.Length; i++)
        {
            var cell = headerRow.CreateCell(i);
            cell.SetCellValue(headers[i]); // Set the header text
            cell.CellStyle = style; // Apply the style to the cell
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
    }
}
```

### Full Example Code

Combining all the updates:

```csharp
public string CreateExcelForDailyPatientSiteFile(FileInfo aAPCSRFile, string outputFilePath, string sheetName)
{
    try
    {
        using (var workbook = new XSSFWorkbook())
        {
            string sourcefile = string.Empty;

            if (aAPCSRFile != null)
            {
                sourcefile = aAPCSRFile.ToString();
            }

            outputFilePath = Path.Combine(exportDirectory, $"{sheetName} {getMonthYear} {currentDateTime}.xlsx");
            if (sheetName != null)
            {
                ISheet sheet = workbook.CreateSheet(sheetName); // Create a blank sheet

                if (sourcefile != string.Empty)
                {
                    LoadDailyPatientSiteCsvData(sourcefile, sheet, workbook, sheetName);  // Load data from csv file and insert into blank sheet
                }
                if (sheetName != string.Empty)
                {
                    using (FileStream stream = new FileStream(outputFilePath, FileMode.Create, FileAccess.Write)) // Save the workbook to an XLSX file
                    {
                        workbook.Write(stream);
                    }
                    Console.WriteLine(sheetName + "...csv file copied to XLSX successfully...");
                }
                else
                {
                    StartConsoleWriting("...File Not Found...!");
                }
            }
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
        throw;
    }
    return "";
}

public void LoadDailyPatientSiteCsvData(string filePath, ISheet sheet, XSSFWorkbook workbook, string sheetName)
{
    try
    {
        XSSFCellStyle numberStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        numberStyle.DataFormat = workbook.CreateDataFormat().GetFormat("General");

        XSSFCellStyle dateStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        dateStyle.DataFormat = workbook.CreateDataFormat().GetFormat("dd-MM-yyyy");

        XSSFCellStyle timeStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        timeStyle.DataFormat = workbook.CreateDataFormat().GetFormat("hh:mm:ss");

        using (TextFieldParser reader = new TextFieldParser(filePath))
        {
            reader.HasFieldsEnclosedInQuotes = true;
            reader.SetDelimiters("\t");

            int rowIndex = 0;

            while (!reader.EndOfData)
            {
                var valueLines = reader.ReadFields();

                if (valueLines == null || valueLines.Length < 9)
                {
                    Console.WriteLine("Empty or invalid line encountered.");
                    continue;
                }

                // Debug output for valueLines
                Console.WriteLine("Processing line: " + string.Join(", ", valueLines));

                if (rowIndex == 0)
                {
                    CreateHeaderRow(sheet, numberStyle);
                    rowIndex++;
                }
                else
                {
                    ProcessDataRows(sheet, rowIndex, valueLines, dateStyle, numberStyle, timeStyle);
                    rowIndex++;
                }
            }
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
        throw;
    }
}

void ProcessDataRows(ISheet sheet, int rowIndex, string[] valueLines, XSSFCellStyle dateStyle, XSSFCellStyle numberStyle, XSSFCellStyle timeStyle)
{
    try
    {
        // Debug output for valueLines
        Console.WriteLine("Processing data row: " + string.Join(", ", valueLines));

        // Extracting values from the input line
        string agentValue = valueLines[1]; // Agent name
        string extensionValue = valueLines[0]; // Extension
        string totalTalkingTimeValue = valueLines[8]; // Total Talking Time

        // Create a new row for data
        var dataRow = sheet.CreateRow(rowIndex);

        // Setting Date cell with current date
        var dateCell = dataRow.CreateCell(0);
        dateCell.SetCellValue(DateTime.Now.ToString("dd-MM-yyyy"));
        dateCell.CellStyle = dateStyle;

        // Setting Agent cell
        var agentCell = dataRow.CreateCell(1);
        agentCell.SetCellValue(extensionValue);
        agentCell.CellStyle = numberStyle;

        // Setting TimesheetOwner cell
        var timesheetOwnerCell = dataRow.CreateCell(2);
        timesheetOwnerCell.SetCellValue(agentValue);
        timesheetOwnerCell.CellStyle = numberStyle;

        // Setting Total Talking time cell
        var totalTalkingTimeCell = dataRow.CreateCell(3);
        totalTalkingTimeCell.SetCellValue(totalTalkingTimeValue);
        totalTalkingTimeCell.CellStyle = timeStyle;
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
    }
}

void CreateHeaderRow(ISheet sheet, XSSFCellStyle style)
{
    try
    {
        // Create a new row at the top of the sheet for the header
        var headerRow = sheet.CreateRow(0);

        // Define the headers
        string[] headers = { "Date", "Agent", "TimesheetOwner", "Total Talking time" };

        // Loop through each header and create a