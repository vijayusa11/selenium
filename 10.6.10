To address the issue of the missing `ConvertStreamToByteArray` method, you can define it within your class. This method will convert an `InputStream` to a byte array, which is necessary for uploading files to Azure.

Hereâ€™s the complete `SaveContractorEmailNote` method with the `ConvertStreamToByteArray` method included:

```csharp
public ResponseModel<bool> SaveContractorEmailNote(HttpRequest emailNoteRequest)
{
    var generalConfiguration = _commonService.GetGeneralConfiguration();
    List<Attachments> sendAttachment = new List<Attachments>();
    EmailNoteDto emailNote = new EmailNoteDto()
    {
        EmailNoteId = 0,
        ContractorId = Convert.ToInt32(emailNoteRequest["ContractorId"].ToString()),
        Subject = emailNoteRequest["Subject"].ToString(),
        Body = emailNoteRequest.Unvalidated["Body"].ToString(),
        FromEmail = emailNoteRequest["FromEmail"].ToString(),
        ToEmail = emailNoteRequest["ToEmail"].ToString(),
        CCEmail = emailNoteRequest["CCEmail"].ToString() == "null" ? "" : emailNoteRequest["CCEmail"].ToString(),
        EmailStatusId = Convert.ToInt16(EmailStatus.Pending),
        Excepton = "",
        InnerException = "",
        StackTrace = "",
        CreatedDate = DateTime.Now,
        NoteId = 0,
        ContractorSubject = emailNoteRequest["Subject"].ToString(),
        Note = emailNoteRequest.Unvalidated["Body"].ToString(),
        CreatedBy = _commonService.GetUserId(),
        PhoneNoteId = 0,
        MannualNoteId = 0,
        NoteTypeId = Convert.ToInt16(NoteType.EmailNote),
    };

    Int64 emailNoteId = _contractorRepository.SaveContractorEmailNote(emailNote);

    if (emailNoteId > 0)
    {
        if (emailNoteRequest.Files.Count > 0)
        {
            HttpPostedFile attachmentFile = emailNoteRequest.Files[0];
            if (attachmentFile != null)
            {
                string dateFolderPath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
                string filePath = "~//Upload/ContractorEmailNote/" + dateFolderPath + emailNoteId.ToString() + "/";

                EmailNoteAttachmentDto emailNoteAttachment = new EmailNoteAttachmentDto()
                {
                    EmailNoteAttachmentId = 0,
                    EmailNoteId = emailNoteId,
                    FileName = attachmentFile.FileName,
                    FilePath = filePath
                };
                Int64 attachmentId = _commonService.SaveEmailNoteAttachment(emailNoteAttachment);

                if (ConfigurationManager.AppSettings["Azure_Attachment"] == "1")
                {
                    // Azure upload logic
                    BLAzureCommonAPI bLAzureCommonAPI = new BLAzureCommonAPI();
                    string azurePath = "UploadedFiles/" + _commonService.GetUserId().ToString();
                    AzureSaveSingleFileDto azureSaveSingleFile = new AzureSaveSingleFileDto()
                    {
                        ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"],
                        FileName = attachmentFile.FileName,
                        SavePath = azurePath,
                        FileBytes = ConvertStreamToByteArray(attachmentFile.InputStream)
                    };
                    bLAzureCommonAPI.SaveSingleFile(azureSaveSingleFile);

                    sendAttachment.Add(new Attachments()
                    {
                        FileName = attachmentFile.FileName,
                        FilePath = azurePath + "/" + attachmentFile.FileName
                    });
                }
                else
                {
                    // Local storage logic
                    var folderPath = HttpContext.Current.Server.MapPath(filePath + attachmentId.ToString());
                    CreateFolderIfNeeded(folderPath);
                    attachmentFile.SaveAs(Path.Combine(folderPath, attachmentFile.FileName));
                    sendAttachment.Add(new Attachments()
                    {
                        FileName = attachmentFile.FileName,
                        FilePath = Path.Combine(folderPath, attachmentFile.FileName)
                    });
                }
            }
        }

        string attachmentIds = emailNoteRequest["attachmentIds"];
        if (!String.IsNullOrEmpty(attachmentIds))
        {
            Int16 templateId = Convert.ToInt16(emailNoteRequest["TemplateId"].ToString());
            var templateAttachments = _templateRepository.GetTemplateAttachment(templateId);
            string[] arr = attachmentIds.Split(',');
            foreach (var item in arr)
            {
                var attachments = templateAttachments.Find(t => t.TemplateAttachmentId == Convert.ToInt16(item));
                if (attachments != null)
                {
                    string dateFolderPath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
                    string filePath = "~//Upload/ContractorEmailNote/" + dateFolderPath + emailNoteId.ToString() + "/";

                    EmailNoteAttachmentDto emailNoteAttachment = new EmailNoteAttachmentDto()
                    {
                        EmailNoteAttachmentId = 0,
                        EmailNoteId = emailNoteId,
                        FileName = attachments.FileName,
                        FilePath = filePath
                    };
                    Int64 attachmentId = _commonService.SaveEmailNoteAttachment(emailNoteAttachment);

                    if (ConfigurationManager.AppSettings["Azure_Attachment"] == "1")
                    {
                        // Azure upload logic
                        BLAzureCommonAPI bLAzureCommonAPI = new BLAzureCommonAPI();
                        string azurePath = "UploadedFiles/" + _commonService.GetUserId().ToString();
                        AzureSaveSingleFileDto azureSaveSingleFile = new AzureSaveSingleFileDto()
                        {
                            ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"],
                            FileName = attachments.FileName,
                            SavePath = azurePath,
                            FileBytes = bLAzureCommonAPI.ConvertFilePathToByte(HttpContext.Current.Server.MapPath(attachments.FilePath), true)
                        };
                        bLAzureCommonAPI.SaveSingleFile(azureSaveSingleFile);

                        sendAttachment.Add(new Attachments()
                        {
                            FileName = attachments.FileName,
                            FilePath = azurePath + "/" + attachments.FileName
                        });
                    }
                    else
                    {
                        // Local storage logic
                        var folderPath = HttpContext.Current.Server.MapPath(filePath + attachmentId.ToString());
                        CreateFolderIfNeeded(folderPath);

                        if (File.Exists(HttpContext.Current.Server.MapPath(attachments.FilePath)))
                        {
                            System.IO.File.Copy(HttpContext.Current.Server.MapPath(attachments.FilePath), folderPath + "/" + attachments.FileName, true);
                            sendAttachment.Add(new Attachments()
                            {
                                FileName = attachments.FileName,
                                FilePath = folderPath + "/" + attachments.FileName
                            });
                        }
                    }
                }
            }
        }
    }

    return _commonService.ReturnResponse(true, true, "Email sent successfully.");
}

private byte[] ConvertStreamToByteArray(Stream inputStream)
{
    using (MemoryStream memoryStream = new MemoryStream())
    {
        inputStream.CopyTo(memoryStream);
        return memoryStream.ToArray();
    }
}

private void CreateFolderIfNeeded(string path)
{
    if (!Directory.Exists(path))
    {
        Directory.CreateDirectory(path);
    }
}
```

### Key Additions:

1. **`ConvertStreamToByteArray` Method**:
   - Converts a `Stream` to a byte array for Azure uploads.

2. **Azure Storage Handling**:
   - Included within the `if` block where `Azure_Attachment` is checked.
   - Uses the `ConvertStreamToByteArray` method to convert the input stream to bytes before uploading to Azure.

3. **Local Storage Handling**:
   - Remains the same within the `else` block, handling the local file storage logic.

This structure separates the Azure storage logic and local storage logic clearly, allowing for easy maintenance and debugging.