in timesheetowner getting this Spare ,,0,0,0,0,0,0,00:00:00
and want to get Spare only that is remaining part of input file column A
so what line i can write here in place of string timesheetOwnerValue = valueLines[0].Substring(agentValue.Length).Trim();
and 00:00:00 want to write in cloumn D so
only give these  lines solution only 
.........
.........

To extract the remaining part of the input file's Column A (after the numeric agent value) into `TimesheetOwner` and place `00:00:00` into Column D (`Total Talking time`), you can modify the line for `timesheetOwnerValue` and ensure `totalTalkingTimeValue` is correctly assigned. Here's how you can adjust those lines:

```csharp
// Extracting values from the input line
string agentValue = valueLines[0].Split('\t')[0]; // Split by tab to ensure we get the full agent value
string timesheetOwnerValue = string.Join(' ', valueLines[0].Split(' ').Skip(1)).Trim();
string totalTalkingTimeValue = valueLines[7]; // Assuming this is the total talking time column

// For TimesheetOwner, if you want only the remaining part after the agentValue:
timesheetOwnerValue = valueLines[0].Substring(agentValue.Length).Trim().Trim('\t');

// Setting Total Talking time cell to 00:00:00
var totalTalkingTimeCell = dataRow.CreateCell(3);
totalTalkingTimeCell.SetCellValue("00:00:00");
totalTalkingTimeCell.CellStyle = timeStyle;
```

### Explanation:

1. **Extracting Agent Value**: Use `Split('\t')[0]` to ensure you get the full value in case there are tabs in the input.
   
2. **Extracting TimesheetOwner Value**: Use `Substring(agentValue.Length).Trim().Trim('\t')` to get the remaining part of the string after the agentValue, trimming any extra spaces or tabs.

3. **Setting Total Talking Time**: Directly set `totalTalkingTimeCell` to `"00:00:00"` as per your requirement.

These adjustments should help you correctly extract the `TimesheetOwner` and set `Total Talking time` as specified. Make sure to integrate these lines into your existing method within the appropriate context.




.......





To correctly extract the `TimesheetOwner` value from your input file's Column A and set `Total Talking time` to `00:00:00` in Column D, you should adjust the way you parse `valueLines` and manipulate the string. Here’s how you can modify your code to achieve this:

```csharp
// Extracting values from the input line
string[] columns = valueLines[0].Split('\t'); // Split by tab to separate columns
string agentValue = columns[0].Split(' ')[0]; // Extract numeric agent value

// Join the remaining parts of columns[0] to get TimesheetOwner value
string timesheetOwnerValue = string.Join(" ", columns[0].Split(' ').Skip(1)).Trim();

// Setting Total Talking time cell to 00:00:00
string totalTalkingTimeValue = columns[7]; // Assuming this is the total talking time column

// Create a new row for data
var dataRow = sheet.CreateRow(rowIndex);

// Setting Date cell with current date
var dateCell = dataRow.CreateCell(0);
dateCell.SetCellValue(DateTime.Today); // Assuming you want today's date
dateCell.CellStyle = dateStyle;

// Setting Agent cell
var agentCell = dataRow.CreateCell(1);
agentCell.SetCellValue(agentValue);
agentCell.CellStyle = numberStyle;

// Setting TimesheetOwner cell
var timesheetOwnerCell = dataRow.CreateCell(2);
timesheetOwnerCell.SetCellValue(timesheetOwnerValue);
timesheetOwnerCell.CellStyle = numberStyle;

// Setting Total Talking time cell
var totalTalkingTimeCell = dataRow.CreateCell(3);
totalTalkingTimeCell.SetCellValue("00:00:00");
totalTalkingTimeCell.CellStyle = timeStyle;
```

### Explanation:

1. **Splitting Input Line**: Split `valueLines[0]` by tab (`'\t'`) to separate columns.
2. **Extracting Agent Value**: From `columns[0]`, split by space (`' '`) to get the numeric agent value.
3. **Extracting TimesheetOwner Value**: Join the remaining parts of `columns[0]` after removing the agent value to get `timesheetOwnerValue`.
4. **Setting Total Talking Time**: Directly set `totalTalkingTimeCell` to `"00:00:00"` as per your requirement.

Make sure your input file is tab-delimited (`'\t'`) as expected by the `TextFieldParser` and adjust the code accordingly if the structure of your input file changes. This approach ensures that `TimesheetOwner` gets the correct value after the numeric agent value, and `Total Talking time` is set to `00:00:00`.



mmmmmmmmmmmm


If you want to extract only the character values from input file Column A for `TimesheetOwner` in the output file Column C, you can modify the extraction logic to ensure that only non-numeric parts are considered. Here’s how you can adjust your code:

```csharp
// Extracting values from the input line
string[] columns = valueLines[0].Split('\t'); // Split by tab to separate columns
string agentValue = columns[0].Split(' ')[0]; // Extract numeric agent value

// Extract non-numeric part of the first column as TimesheetOwner value
string timesheetOwnerValue = ExtractCharacterValues(columns[0]);

// Setting Total Talking time cell to 00:00:00
string totalTalkingTimeValue = columns[7]; // Assuming this is the total talking time column

// Create a new row for data
var dataRow = sheet.CreateRow(rowIndex);

// Setting Date cell with current date
var dateCell = dataRow.CreateCell(0);
dateCell.SetCellValue(DateTime.Today); // Assuming you want today's date
dateCell.CellStyle = dateStyle;

// Setting Agent cell
var agentCell = dataRow.CreateCell(1);
agentCell.SetCellValue(agentValue);
agentCell.CellStyle = numberStyle;

// Setting TimesheetOwner cell
var timesheetOwnerCell = dataRow.CreateCell(2);
timesheetOwnerCell.SetCellValue(timesheetOwnerValue);
timesheetOwnerCell.CellStyle = numberStyle; // Apply appropriate style as needed

// Setting Total Talking time cell
var totalTalkingTimeCell = dataRow.CreateCell(3);
totalTalkingTimeCell.SetCellValue(totalTalkingTimeValue);
totalTalkingTimeCell.CellStyle = timeStyle;

// Method to extract character values from a string
private string ExtractCharacterValues(string input)
{
    StringBuilder result = new StringBuilder();
    foreach (char c in input)
    {
        if (!char.IsDigit(c) && c != '\t')
        {
            result.Append(c);
        }
    }
    return result.ToString().Trim();
}
```

### Explanation:

1. **Splitting Input Line**: Split `valueLines[0]` by tab (`'\t'`) to separate columns.
2. **Extracting Agent Value**: From `columns[0]`, split by space (`' '`) to get the numeric agent value.
3. **Extracting TimesheetOwner Value**: Use `ExtractCharacterValues` method to extract only character values from `columns[0]`.
4. **Setting Total Talking Time**: Assume `totalTalkingTimeValue` is directly from `columns[7]`.
5. **Cell Styling**: Ensure to apply appropriate styles (`numberStyle`, `timeStyle`, etc.) as needed for cells.

### `ExtractCharacterValues` Method:

This method iterates through each character in the input string (`columns[0]`) and appends non-numeric characters (excluding tab characters) to a `StringBuilder`. It then returns the concatenated result as a string, which will be used as `TimesheetOwner` value.

This approach ensures that only character values are extracted and trimmed for `TimesheetOwner`, as requested. Adjust any additional cell styles or data handling logic based on your specific requirements and input file structure.


kkkkkk
kkkkkk

To remove commas (`,`) from the extracted `TimesheetOwner` value in addition to extracting only character values from input file Column A, you can modify the `ExtractCharacterValues` method to exclude commas during the extraction process. Here’s how you can adjust your code:

```csharp
// Extracting values from the input line
string[] columns = valueLines[0].Split('\t'); // Split by tab to separate columns
string agentValue = columns[0].Split(' ')[0]; // Extract numeric agent value

// Extract non-numeric part of the first column as TimesheetOwner value
string timesheetOwnerValue = ExtractCharacterValues(columns[0]);

// Remove commas from TimesheetOwner value
timesheetOwnerValue = timesheetOwnerValue.Replace(",", "");

// Setting Total Talking time cell to 00:00:00
string totalTalkingTimeValue = columns[7]; // Assuming this is the total talking time column

// Create a new row for data
var dataRow = sheet.CreateRow(rowIndex);

// Setting Date cell with current date
var dateCell = dataRow.CreateCell(0);
dateCell.SetCellValue(DateTime.Today); // Assuming you want today's date
dateCell.CellStyle = dateStyle;

// Setting Agent cell
var agentCell = dataRow.CreateCell(1);
agentCell.SetCellValue(agentValue);
agentCell.CellStyle = numberStyle;

// Setting TimesheetOwner cell
var timesheetOwnerCell = dataRow.CreateCell(2);
timesheetOwnerCell.SetCellValue(timesheetOwnerValue);
timesheetOwnerCell.CellStyle = numberStyle; // Apply appropriate style as needed

// Setting Total Talking time cell
var totalTalkingTimeCell = dataRow.CreateCell(3);
totalTalkingTimeCell.SetCellValue(totalTalkingTimeValue);
totalTalkingTimeCell.CellStyle = timeStyle;

// Method to extract character values from a string and remove commas
private string ExtractCharacterValues(string input)
{
    StringBuilder result = new StringBuilder();
    foreach (char c in input)
    {
        if (!char.IsDigit(c) && c != '\t' && c != ',')
        {
            result.Append(c);
        }
    }
    return result.ToString().Trim();
}
```

### Explanation:

1. **Extracting Agent Value**: Same as before, split `columns[0]` to extract numeric agent value.
2. **Extracting TimesheetOwner Value**: Use `ExtractCharacterValues` method to extract character values and then remove commas using `Replace(",", "")`.
3. **Setting Total Talking Time**: Directly assign `totalTalkingTimeValue` assuming it's from `columns[7]`.
4. **Cell Styling**: Apply appropriate styles (`numberStyle`, `timeStyle`, etc.) as required for the respective cells.

### Updated `ExtractCharacterValues` Method:

The `ExtractCharacterValues` method now includes a check to skip commas (`','`) along with digits (`char.IsDigit(c)`) and tabs (`'\t'`). It builds the result using `StringBuilder` and returns the trimmed string without commas.

This modification ensures that the `TimesheetOwner` value in the output does not contain any commas, meeting your requirement to remove them from the extracted character values. Adjust any additional logic or styles based on your specific needs and input file structure.