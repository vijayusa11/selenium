1. Remove all data from excel above this row -
22-04-2024	1000	1000 Spare	0
2. Column A date will be today date it will not a fixed date

.......



Yes, the provided code is a full example based on the methods you initially shared. Here's the full consolidated version for clarity:

```csharp
using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using Microsoft.VisualBasic.FileIO;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;

private void ProcessFile(FileInfo file, string sheetName, string notFoundMessage)
{
    try
    {
        if (file != null)
        {
            var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(file.Name);
            if (fileNameWithoutExtension.Contains("Global"))
            {
                dailyActivitySheetName = fileNameWithoutExtension;
            }

            if (fileNameWithoutExtension.ToUpper().Contains(sheetName.ToUpper()))
            {
                CreateExcelForDailyPatientSiteFile(file, outputFilePath, fileNameWithoutExtension);
            }
        }
        else
        {
            LogToErrorFile(notFoundMessage);
            Console.WriteLine(notFoundMessage);
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
    }
}

public string CreateExcelForDailyPatientSiteFile(FileInfo aAPCSRFile, string outputFilePath, string sheetName)
{
    try
    {
        using (var workbook = new XSSFWorkbook())
        {
            string sourcefile = string.Empty;

            if (aAPCSRFile != null)
            {
                sourcefile = aAPCSRFile.ToString();
            }

            outputFilePath = Path.Combine(exportDirectory, $"{sheetName} {getMonthYear} {currentDateTime}.xlsx");
            if (sheetName != null)
            {
                ISheet sheet = workbook.CreateSheet(sheetName); // Create a blank sheet

                if (sourcefile != string.Empty)
                {
                    LoadDailyPatientSiteCsvData(sourcefile, sheet, workbook, sheetName);  // Load data from csv file and insert into blank sheet
                }
                if (sheetName != string.Empty)
                {
                    using (FileStream stream = new FileStream(outputFilePath, FileMode.Create, FileAccess.Write)) // Save the workbook to an XLSX file
                    {
                        workbook.Write(stream);
                    }
                    Console.WriteLine(sheetName + "...csv file copied to XLSX successfully...");
                }
                else
                {
                    StartConsoleWriting("...File Not Found...!");
                }
            }
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
        throw;
    }
    return "";
}

public void LoadDailyPatientSiteCsvData(string filePath, ISheet sheet, XSSFWorkbook workbook, string sheetName)
{
    try
    {
        XSSFCellStyle numberStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        numberStyle.DataFormat = workbook.CreateDataFormat().GetFormat("General");

        XSSFCellStyle dateStyle = (XSSFCellStyle)workbook.CreateCellStyle();
        dateStyle.DataFormat = workbook.CreateDataFormat().GetFormat("dd-mm-yyyy");

        using (TextFieldParser reader = new TextFieldParser(filePath))
        {
            reader.HasFieldsEnclosedInQuotes = true;
            reader.SetDelimiters("\t");

            int rowIndex = 0;
            bool dataStartFound = false;
            string[] valueLines = null;

            // Regular expression to match the pattern of numeric value followed by text
            var regex = new Regex(@"^\d+\s+\S+");

            while (!reader.EndOfData)
            {
                valueLines = reader.ReadFields();
                if (rowIndex == 0)
                {
                    CreateHeaderRow(sheet, numberStyle);
                }
                else if (!dataStartFound && regex.IsMatch(valueLines[0]))
                {
                    // This is the first row with the required pattern, start processing from here
                    dataStartFound = true;
                    ProcessDataRows(sheet, rowIndex, valueLines, dateStyle, numberStyle);
                }
                else if (dataStartFound)
                {
                    ProcessDataRows(sheet, rowIndex, valueLines, dateStyle, numberStyle);
                }

                if (dataStartFound)
                {
                    rowIndex++;
                }
            }
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
        throw;
    }
}

void CreateHeaderRow(ISheet sheet, XSSFCellStyle style)
{
    try
    {
        // Create a new row at the top of the sheet for the header
        var headerRow = sheet.CreateRow(0);

        // Define the headers
        string[] headers = { "Date", "Agent", "TimesheetOwner", "Total Talking time" };

        // Loop through each header and create a cell in the header row
        for (int i = 0; i < headers.Length; i++)
        {
            var cell = headerRow.CreateCell(i);
            cell.SetCellValue(headers[i]); // Set the header text
            cell.CellStyle = style; // Apply the style to the cell
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
    }
}

void ProcessDataRows(ISheet sheet, int rowIndex, string[] valueLines, XSSFCellStyle dateStyle, XSSFCellStyle numberStyle)
{
    try
    {
        var dataRow = sheet.CreateRow(rowIndex);

        // Assuming the CSV has the correct number of columns in the specified order
        if (valueLines.Length >= 8) // Ensure there are enough columns
        {
            // Date column (current date)
            var dateCell = dataRow.CreateCell(0);
            dateCell.SetCellValue(DateTime.Now); // Use the current date
            dateCell.CellStyle = dateStyle;

            // Agent column (numeric part extraction)
            var agentCell = dataRow.CreateCell(1);
            var agentValue = valueLines[0];
            var numericPart = new string(agentValue.Where(char.IsDigit).ToArray());
            agentCell.SetCellValue(numericPart);
            agentCell.CellStyle = numberStyle;

            // TimesheetOwner column (text part extraction)
            var timesheetOwnerCell = dataRow.CreateCell(2);
            timesheetOwnerCell.SetCellValue(agentValue);
            timesheetOwnerCell.CellStyle = numberStyle;

            // Total Talking time column
            var totalTalkingTimeCell = dataRow.CreateCell(3);
            totalTalkingTimeCell.SetCellValue(valueLines[7]); // Assuming the 8th column contains the total talking time
            totalTalkingTimeCell.CellStyle = numberStyle;
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile(ex.Message);
        StartConsoleWriting(ex.Message);
    }
}
```

### Summary of the changes:

1. **Regular Expression**: 
   - Uses `@"^\d+\s+\S+"` to find the first row where column A contains a numeric value followed by text.

2. **LoadDailyPatientSiteCsvData Method**: 
   - It reads through the CSV data and skips rows until it finds a row that matches the pattern.
   - Processes rows only from the first matched pattern onwards.

3. **Dynamic Date**:
   - `ProcessDataRows` method sets the date to the current date (`DateTime.Now`).

4. **Extracting Numeric and Text Parts**:
   - `ProcessDataRows` method extracts the numeric part of the agent value and sets the entire agent value as the timesheet owner.

This should cover your requirements for processing the CSV data and generating the Excel file as needed.