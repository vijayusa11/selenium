To make the `SaveContractorEmailNote` method handle attachments differently based on the `Azure_Attachment` setting, we can structure the code with an `if-else` block to handle Azure and local storage separately. Here's how you can do it:

```csharp
public ResponseModel<bool> SaveContractorEmailNote(HttpRequest emailNoteRequest)
{
    try
    {
        var generalConfiguration = _commonService.GetGeneralConfiguration();
        List<Attachments> sendAttachment = new List<Attachments>();
        EmailNoteDto emailNote = new EmailNoteDto()
        {
            EmailNoteId = 0,
            ContractorId = Convert.ToInt32(emailNoteRequest["ContractorId"].ToString()),
            Subject = emailNoteRequest["Subject"].ToString(),
            Body = emailNoteRequest.Unvalidated["Body"].ToString(),
            FromEmail = emailNoteRequest["FromEmail"].ToString(),
            ToEmail = emailNoteRequest["ToEmail"].ToString(),
            CCEmail = emailNoteRequest["CCEmail"].ToString() == "null" ? "" : emailNoteRequest["CCEmail"].ToString(),
            EmailStatusId = Convert.ToInt16(EmailStatus.Pending),
            Excepton = "",
            InnerException = "",
            StackTrace = "",
            CreatedDate = DateTime.Now,
            NoteId = 0,
            ContractorSubject = emailNoteRequest["Subject"].ToString(),
            Note = emailNoteRequest.Unvalidated["Body"].ToString(),
            CreatedBy = _commonService.GetUserId(),
            PhoneNoteId = 0,
            MannualNoteId = 0,
            NoteTypeId = Convert.ToInt16(NoteType.EmailNote),
        };
        Int64 emailNoteId = _contractorRepository.SaveContractorEmailNote(emailNote);

        if (emailNoteId <= 0)
        {
            return _commonService.ReturnResponse(false, false, "Failed to save email note.");
        }

        bool useAzure = ConfigurationManager.AppSettings["Azure_Attachment"] == "1";
        if (useAzure)
        {
            HandleAzureAttachments(emailNoteRequest, emailNoteId, sendAttachment);
        }
        else
        {
            HandleLocalAttachments(emailNoteRequest, emailNoteId, sendAttachment);
        }

        return _commonService.ReturnResponse(true, true, "Email sent successfully.");
    }
    catch (Exception ex)
    {
        return _commonService.ReturnResponse(false, false, "Error occurred: " + ex.Message);
    }
}

private void HandleAzureAttachments(HttpRequest emailNoteRequest, long emailNoteId, List<Attachments> sendAttachment)
{
    BLAzureCommonAPI bLAzureCommonAPI = new BLAzureCommonAPI();
    string basePath = "UploadedFiles/" + _commonService.GetUserId().ToString();

    if (emailNoteRequest.Files.Count > 0)
    {
        foreach (string fileKey in emailNoteRequest.Files)
        {
            HttpPostedFile attachmentFile = emailNoteRequest.Files[fileKey];
            if (attachmentFile != null)
            {
                string azurePath = basePath + "/" + attachmentFile.FileName;
                AzureSaveSingleFileDto azureSaveSingleFile = new AzureSaveSingleFileDto()
                {
                    ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"],
                    FileName = attachmentFile.FileName,
                    SavePath = azurePath,
                    FileBytes = bLAzureCommonAPI.ConvertFilePathToByte(attachmentFile.InputStream, true)
                };
                bLAzureCommonAPI.SaveSingleFile(azureSaveSingleFile);

                sendAttachment.Add(new Attachments()
                {
                    FileName = attachmentFile.FileName,
                    FilePath = azurePath
                });

                SaveEmailNoteAttachment(emailNoteId, attachmentFile.FileName, azurePath);
            }
        }
    }

    HandleTemplateAttachments(emailNoteRequest, emailNoteId, sendAttachment, true);
}

private void HandleLocalAttachments(HttpRequest emailNoteRequest, long emailNoteId, List<Attachments> sendAttachment)
{
    if (emailNoteRequest.Files.Count > 0)
    {
        foreach (string fileKey in emailNoteRequest.Files)
        {
            HttpPostedFile attachmentFile = emailNoteRequest.Files[fileKey];
            if (attachmentFile != null)
            {
                string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
                string filePath = "~//Upload/ContractorEmailNote/" + Datefolderpath + emailNoteId.ToString() + "/";
                var folderPath = HttpContext.Current.Server.MapPath(filePath);

                CreateFolderIfNeeded(folderPath);
                attachmentFile.SaveAs(Path.Combine(folderPath, attachmentFile.FileName));

                sendAttachment.Add(new Attachments()
                {
                    FileName = attachmentFile.FileName,
                    FilePath = Path.Combine(folderPath, attachmentFile.FileName)
                });

                SaveEmailNoteAttachment(emailNoteId, attachmentFile.FileName, filePath);
            }
        }
    }

    HandleTemplateAttachments(emailNoteRequest, emailNoteId, sendAttachment, false);
}

private void HandleTemplateAttachments(HttpRequest emailNoteRequest, long emailNoteId, List<Attachments> sendAttachment, bool useAzure)
{
    string attachmentIds = emailNoteRequest["attachmentIds"];
    if (!String.IsNullOrEmpty(attachmentIds))
    {
        Int16 templateId = Convert.ToInt16(emailNoteRequest["TemplateId"].ToString());
        var templateAttachments = _templateRepository.GetTemplateAttachment(templateId);
        string[] arr = attachmentIds.Split(',');

        foreach (var item in arr)
        {
            var attachments = templateAttachments.Find(t => t.TemplateAttachmentId == Convert.ToInt16(item));
            string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
            string filePath = "~//Upload/ContractorEmailNote/" + Datefolderpath + emailNoteId.ToString() + "/";
            var folderPath = HttpContext.Current.Server.MapPath(filePath);

            if (useAzure)
            {
                BLAzureCommonAPI bLAzureCommonAPI = new BLAzureCommonAPI();
                string azurePath = "UploadedFiles/" + _commonService.GetUserId().ToString() + "/" + attachments.FileName;
                AzureSaveSingleFileDto azureSaveSingleFile = new AzureSaveSingleFileDto()
                {
                    ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"],
                    FileName = attachments.FileName,
                    SavePath = azurePath,
                    FileBytes = bLAzureCommonAPI.ConvertFilePathToByte(HttpContext.Current.Server.MapPath(attachments.FilePath), true)
                };
                bLAzureCommonAPI.SaveSingleFile(azureSaveSingleFile);

                sendAttachment.Add(new Attachments()
                {
                    FileName = attachments.FileName,
                    FilePath = azurePath
                });

                SaveEmailNoteAttachment(emailNoteId, attachments.FileName, azurePath);
            }
            else
            {
                CreateFolderIfNeeded(folderPath);
                if (File.Exists(HttpContext.Current.Server.MapPath(attachments.FilePath)))
                {
                    File.Copy(HttpContext.Current.Server.MapPath(attachments.FilePath), Path.Combine(folderPath, attachments.FileName), true);
                    sendAttachment.Add(new Attachments()
                    {
                        FileName = attachments.FileName,
                        FilePath = Path.Combine(folderPath, attachments.FileName)
                    });

                    SaveEmailNoteAttachment(emailNoteId, attachments.FileName, filePath);
                }
            }
        }
    }
}

private void SaveEmailNoteAttachment(long emailNoteId, string fileName, string filePath)
{
    EmailNoteAttachmentDto emailNoteAttachment = new EmailNoteAttachmentDto()
    {
        EmailNoteAttachmentId = 0,
        EmailNoteId = emailNoteId,
        FileName = fileName,
        FilePath = filePath
    };
    _commonService.SaveEmailNoteAttachment(emailNoteAttachment);
}

private void CreateFolderIfNeeded(string path)
{
    if (!Directory.Exists(path))
    {
        Directory.CreateDirectory(path);
    }
}
```

### Explanation:

1. **Configuration Check**:
   - The method first checks if `Azure_Attachment` is enabled.

2. **Conditional Handling**:
   - If Azure attachment is enabled, the method `HandleAzureAttachments` is called.
   - If not, the method `HandleLocalAttachments` is called.

3. **Azure Attachment Handling**:
   - `HandleAzureAttachments` manages uploading files to Azure and saves their paths.

4. **Local Attachment Handling**:
   - `HandleLocalAttachments` manages saving files locally and saves their paths.

5. **Template Attachment Handling**:
   - `HandleTemplateAttachments` is called within both `HandleAzureAttachments` and `HandleLocalAttachments`, with a flag indicating whether to handle the attachments for Azure or local storage.

6. **Helper Methods**:
   - `SaveEmailNoteAttachment`: Saves the attachment information to the database.
   - `CreateFolderIfNeeded`: Creates directories as needed.

This refactored code ensures that the attachments are handled either by uploading to Azure or saving locally based on the configuration setting.