To ensure the export functionality operates as per the specific list selected, we need to update the `ExportClient` method to accept a parameter representing the selected list. Here’s a modified version of your code to achieve this:

1. Add an additional parameter to the `ExportClient` method to specify the list selection.
2. Ensure that the `_userService.ExportUserListing` method can handle this parameter.

Here is the revised code:

```csharp
using System.Net;
using System.Net.Http;
using System.Web.Http;

[Authorize]
[PermissionFilter(Permission.View, Modules.User)]
[HttpPost]
[Route("list")]
public HttpResponseMessage ClientList(PageListingModel pageListing)
{
    return Request.CreateResponse(HttpStatusCode.OK, _userService.GetUserListing(pageListing));
}

[Authorize]
[PermissionFilter(Permission.Export, Modules.User)]
[HttpPost]
[Route("export")]
public HttpResponseMessage ExportClient(PageListingModel pageListing, [FromBody] List<int> selectedIds)
{
    var exportData = _userService.ExportUserListing(pageListing, selectedIds);
    return Request.CreateResponse(HttpStatusCode.OK, exportData);
}
```

### Explanation:
1. **Import Statements**: Ensure you have the required namespaces:
   ```csharp
   using System.Net;
   using System.Net.Http;
   using System.Web.Http;
   ```
2. **Route "list"**: This endpoint fetches the list of users based on `pageListing`.
3. **Route "export"**: 
   - This endpoint accepts a `PageListingModel` and a list of selected IDs (`List<int> selectedIds`) representing the specific users to be exported.
   - The `[FromBody]` attribute is used to specify that `selectedIds` should be parsed from the request body.
   - The `ExportUserListing` method in the service layer should be capable of handling the additional parameter `selectedIds`.

### Service Layer Modification:

Ensure the `_userService.ExportUserListing` method in your service layer is updated to accept and process the `selectedIds` parameter:

```csharp
public class UserService
{
    public ExportData ExportUserListing(PageListingModel pageListing, List<int> selectedIds)
    {
        // Implement logic to export user data based on the provided pageListing and selectedIds.
        // ...

        return exportData;
    }
}
```

### Client-Side Example (JavaScript/AJAX):

Here’s an example of how you might send a request to the `export` endpoint from the client side using JavaScript (assuming you are using AJAX):

```javascript
function exportSelectedUsers(pageListing, selectedIds) {
    const data = {
        pageListing: pageListing,
        selectedIds: selectedIds
    };

    fetch('/export', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(exportData => {
        // Handle the export data (e.g., initiate file download)
        console.log(exportData);
    })
    .catch(error => {
        console.error('Error:', error);
    });
}
```

This setup ensures that the export functionality works for the particular list of users selected by the client.

........



It seems you are trying to generate and download a CSV file based on a user list. The code you provided is not complete and has several syntax errors. Let's rewrite the method to generate a CSV file correctly.

### Corrected `ExportUserListing` Method:

1. Ensure the `ExportUserListing` method writes the data to a CSV file.
2. Set up proper headers and rows in the CSV.
3. Return the file in the HTTP response.

Here is a revised version:

```csharp
public HttpResponseMessage ExportUserListing(PageListingModel pageListing, List<int> selectedIds)
{
    StringBuilder excelRows = new StringBuilder();
    var userList = userRepository.GetUserListing(pageListing);

    string fileName = "User_" + DateTime.Now.ToString("dd-yyyy-hhmmss") + ".csv";
    string mainPath = "/UploadedFiles/" + commonService.GetUserId().ToString();
    var folderPath = HttpContext.Current.Server.MapPath(mainPath);

    // Create folder if needed
    if (!Directory.Exists(folderPath))
    {
        Directory.CreateDirectory(folderPath);
    }

    using (StreamWriter sw = new StreamWriter(Path.Combine(folderPath, fileName), false))
    {
        // Set Headers
        excelRows.AppendLine("Name,Email,IsAdmin,UserType,RoleName,Active");

        // Set Data
        if (userList != null && userList.Count > 0)
        {
            foreach (var user in userList)
            {
                // Append each user data to excelRows
                excelRows.AppendLine($"{user.Name},{user.Email},{user.IsAdmin},{user.UserType},{user.RoleName},{user.Active}");
            }
        }

        sw.Write(excelRows.ToString());
        sw.Close();
    }

    // Return file in response
    HttpResponseMessage response = Request.CreateResponse(HttpStatusCode.OK);
    response.Content = new StreamContent(new FileStream(Path.Combine(folderPath, fileName), FileMode.Open, FileAccess.Read));
    response.Content.Headers.ContentDisposition = new System.Net.Http.Headers.ContentDispositionHeaderValue("attachment")
    {
        FileName = fileName
    };
    response.Content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");

    return response;
}
```

### Explanation:

1. **StringBuilder for CSV Rows**: Initializes a `StringBuilder` to accumulate CSV rows.
2. **Get User List**: Fetches the user list based on `pageListing`.
3. **File Name and Path**: Constructs the CSV file name with the current timestamp and sets the file path.
4. **Create Directory**: Checks if the directory exists and creates it if not.
5. **StreamWriter**: Opens a `StreamWriter` to write to the CSV file.
6. **CSV Headers**: Adds the CSV headers.
7. **Write User Data**: Loops through the user list and appends each user's data to `excelRows`.
8. **Write CSV File**: Writes the accumulated rows to the file and closes the `StreamWriter`.
9. **Return File in Response**: Creates an `HttpResponseMessage` with the file content, sets the content disposition header for download, and returns the response.

### Service Layer Update:

Ensure that `userRepository.GetUserListing` can handle `PageListingModel` and `selectedIds` if needed:

```csharp
public class UserService : IUserService
{
    public List<User> GetUserListing(PageListingModel pageListing)
    {
        // Implement logic to get user listing based on the pageListing parameters
        // Possibly filter users based on selectedIds if required
        // ...
    }

    public HttpResponseMessage ExportUserListing(PageListingModel pageListing, List<int> selectedIds)
    {
        // Implement the CSV export logic as described above
        // ...
    }
}
```

### Client-Side Example (JavaScript/AJAX):

Here’s how you might send a request to the `export` endpoint from the client side using JavaScript:

```javascript
function exportSelectedUsers(pageListing, selectedIds) {
    const data = {
        pageListing: pageListing,
        selectedIds: selectedIds
    };

    fetch('/export', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (response.ok) {
            return response.blob();
        } else {
            throw new Error('Export failed');
        }
    })
    .then(blob => {
        const url = window.URL.createObjectURL(new Blob([blob]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', 'UserExport.csv');
        document.body.appendChild(link);
        link.click();
        link.parentNode.removeChild(link);
    })
    .catch(error => {
        console.error('Error:', error);
    });
}
```

This setup ensures the `ExportUserListing` method generates a CSV file based on the user list and allows the file to be downloaded through the client's browser.