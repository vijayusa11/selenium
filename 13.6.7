 private int SaveTicketAttachment(HttpRequest ticketAttachment, Int32 ticketId)
 {
     if (ConfigurationManager.AppSettings["Azure_Attachment"] == "1")
     {
         BLAzureCommonAPI bLAzureCommonAPI = new BLAzureCommonAPI();
         if (ticketAttachment.Files.Count > 0)
         {
             for (int i = 0; i < ticketAttachment.Files.AllKeys.Length; i++)
             {
                 HttpPostedFile attachmentFile = ticketAttachment.Files[i];
                 if (attachmentFile != null)
                 {
                     string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
                     TicketAttachmentDto attachmentDto = new TicketAttachmentDto()
                     {
                         TicketId = ticketId,
                         TicketAttachmentId = 0,
                         FileName = attachmentFile.FileName,
                         FilePath = Path.Combine("Upload/Ticket/" + Datefolderpath + ticketId, attachmentFile.FileName),

                     };
                     Int32 ticketAttachmentId = _ticketRepository.SaveTicketAttachment(attachmentDto);
                     
                     var folderPath = "Upload/Ticket/" + Datefolderpath + ticketId + "/" + ticketAttachmentId;

                     AzureSaveSingleFileDto azureSaveSingleFile = new AzureSaveSingleFileDto()
                     {
                         ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"].ToString(),
                         FileName = attachmentFile.FileName,
                         SavePath = folderPath,
                         FileBytes = bLAzureCommonAPI.ConvertStreamToByte(attachmentFile.InputStream, attachmentFile.ContentLength),
                     };
                     bLAzureCommonAPI.SaveSingleFile(azureSaveSingleFile);
                 }
             }
         }

         string attachmentIds = ticketAttachment["attachmentIds"];
         if (!String.IsNullOrEmpty(attachmentIds))
         {
             Int16 templateId = Convert.ToInt16(ticketAttachment["TemplateId"].ToString());
             List<GetTemplateAttachment_Result> res = _templateRepository.GetTemplateAttachment(templateId);
             string[] arr = attachmentIds.Split(',');
             foreach (var item in arr)
             {
                 var attachments = res.Find(t => t.TemplateAttachmentId == Convert.ToInt16(item));
                 string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
                 TicketAttachmentDto attachmentDto = new TicketAttachmentDto()
                 {
                     TicketId = ticketId,
                     TicketAttachmentId = 0,
                     FileName = attachments.FileName,
                     FilePath = Path.Combine("Upload/Ticket/" + Datefolderpath + ticketId, attachments.FileName),

                 };
                 Int32 ticketAttachmentId = _ticketRepository.SaveTicketAttachment(attachmentDto);

                 var folderPath = "Upload/Ticket/" + Datefolderpath + ticketId + "/" + ticketAttachmentId;

                 AzureDownloadSingleFileDto azureDownloadSingleFile = new AzureDownloadSingleFileDto()
                 {
                     Path = attachments.FilePath + "/" + attachments.FileName,
                     ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"].ToString(),
                 };
                 var downloadedFile = bLAzureCommonAPI.DownloadSingleFile(azureDownloadSingleFile);

                 if (downloadedFile.IsSuccess == true)
                 {
                     AzureMoveSingleFilesDto azureMoveSingleFiles = new AzureMoveSingleFilesDto()
                     {
                         ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"].ToString(),
                         SourceFileName = attachments.FileName,
                         DestinationFileName = attachments.FileName,
                         SourceFolder = attachments.FilePath,
                         DestinationFolder = folderPath
                     };
                     bLAzureCommonAPI.CopySingleFile(azureMoveSingleFiles);

                     AzureDeleteSingleFileDto azureDeleteSingleFile = new AzureDeleteSingleFileDto()
                     {
                         ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"].ToString(),
                         Path = attachments.FilePath + "/" + attachments.FileName
                     };
                     bLAzureCommonAPI.DeleteSingleFile(azureDeleteSingleFile);
                 }
                 else
                 {
                     return 1;
                 }
             }
         }

         return 0;
     }
     else
     {
         if (ticketAttachment.Files.Count > 0)
         {
             for (int i = 0; i < ticketAttachment.Files.AllKeys.Length; i++)
             {
                 HttpPostedFile attachmentFile = ticketAttachment.Files[i];
                 if (attachmentFile != null)
                 {
                     string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
                     TicketAttachmentDto attachmentDto = new TicketAttachmentDto()
                     {
                         TicketId = ticketId,
                         TicketAttachmentId = 0,
                         FileName = attachmentFile.FileName,
                         FilePath = Path.Combine("~/Upload/Ticket/" + Datefolderpath + ticketId, attachmentFile.FileName),

                     };
                     Int32 ticketAttachmentId = _ticketRepository.SaveTicketAttachment(attachmentDto);
                     var folderPath = HttpContext.Current.Server.MapPath("~//Upload/Ticket/" + Datefolderpath + ticketId + "/" + ticketAttachmentId);
                     CreateFolderIfNeeded(folderPath);
                     attachmentFile.SaveAs(Path.Combine(folderPath, attachmentFile.FileName));
                 }
             }
         }

         string attachmentIds = ticketAttachment["attachmentIds"];
         if (!String.IsNullOrEmpty(attachmentIds))
         {
             Int16 templateId = Convert.ToInt16(ticketAttachment["TemplateId"].ToString());
             List<GetTemplateAttachment_Result> res = _templateRepository.GetTemplateAttachment(templateId);
             string[] arr = attachmentIds.Split(',');
             foreach (var item in arr)
             {
                 var attachments = res.Find(t => t.TemplateAttachmentId == Convert.ToInt16(item));
                 string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";
                 TicketAttachmentDto attachmentDto = new TicketAttachmentDto()
                 {
                     TicketId = ticketId,
                     TicketAttachmentId = 0,
                     FileName = attachments.FileName,
                     FilePath = Path.Combine("~/Upload/Ticket/" + Datefolderpath + ticketId, attachments.FileName),

                 };
                 Int32 ticketAttachmentId = _ticketRepository.SaveTicketAttachment(attachmentDto);

                 var folderPath = HttpContext.Current.Server.MapPath("~//Upload/Ticket/" + Datefolderpath + ticketId + "/" + ticketAttachmentId);
                 if (System.IO.File.Exists(HttpContext.Current.Server.MapPath(attachments.FilePath)))
                 {
                     System.IO.File.Copy(HttpContext.Current.Server.MapPath(attachments.FilePath), folderPath + "/" + attachments.FileName, true);
                 }
                 else
                 {
                     return 1;
                 }
             }
         }

         return 0;
     }
         

 }


want to implement DeleteSingleFile method for both azure and local storage for below mention methos as it did in above method

  private void RemoveTemplateAttachment(Int16 attachmentId, short templateId)
  {
      TemplateAttachmentDto attachmentDto = new TemplateAttachmentDto();
      attachmentDto.TemplateId = templateId;
      attachmentDto.TemplateAttachmentId = Convert.ToInt16(attachmentId);

      var templateAttachments = _templateRepository.GetTemplateAttachment(templateId);
      var attachment = templateAttachments.Where(t => t.TemplateAttachmentId == attachmentId).FirstOrDefault();


      var folderPath = HttpContext.Current.Server.MapPath(attachment.FilePath);
      if (Directory.Exists(Path.GetDirectoryName(folderPath)))
      {
          Directory.Delete(Path.GetDirectoryName(folderPath), true);
      }

      Int16 templateAttachmentId = _templateRepository.SaveTemplateAttachment(attachmentDto);

  }
