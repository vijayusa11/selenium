every time dont create a new folder or path save all input excels output in same output file so output excel will extend 
accordingly if want also can do on system desktop.

using MedsolDataEntryAutomation.Services;
using Microsoft.IdentityModel.Protocols;
using Microsoft.VisualBasic.FileIO;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;
//using static MedsolPhoneEntryAutomation.Services.ProcessServices;

namespace MedsolPhoneEntry
{

    public class WebScraping : IDisposable
    {
        public string downloadDirectory = string.Empty;
        public static string exportDirectory = string.Empty;
        string dailyActivitySheetName = string.Empty;
        string outputFilePath = string.Empty;
        string currentDateTime = DateTime.Now.ToString("hhmmss");
        public static string? importFilePath = Convert.ToString(ConfigurationManager.AppSettings["ImportFilePath"]);
        public static string? exportFilePath = Convert.ToString(ConfigurationManager.AppSettings["ExportFilePath"]);
        public static string? errorLogFilePath = Convert.ToString(ConfigurationManager.AppSettings["ErrorLogFilePath"]);
        DateTime currentMonthYear = System.DateTime.Now;
        string? getMonthYear = string.Empty;
        string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
        int rowIndexColumn = 0;
        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }

        public void StartPhoneEntryProcess(string[] args)
        {
            try
            {
                string mAddress = GetIPAddress();
                StartConsoleWriting("Start BOT");

                string filePathdownloadDirectory = Path.Combine(baseDirectory, exportFilePath);
                string filePathexportDirectory = Path.Combine(baseDirectory, exportFilePath);

                downloadDirectory = Path.Combine(filePathdownloadDirectory == null ? "" : filePathdownloadDirectory, DateTime.Now.ToString("ddMMyyyy"), DateTime.Now.ToString("hhmmss"), "OriginalBOTFiles");

                exportDirectory = Path.Combine(filePathexportDirectory == null ? "" : filePathexportDirectory, DateTime.Now.ToString("ddMMyyyy"), DateTime.Now.ToString("hhmmss"), "ProcessedBOTFiles");

                getMonthYear = currentMonthYear.ToString("dd-MM-yyyy");

                API aPI = new API();
                var res = aPI.CheckLicense(mAddress);

                CreateDirectoryIfNotExists(downloadDirectory);
                CreateDirectoryIfNotExists(exportDirectory);

                if (importFilePath != null)
                {
                    string filePathimportDirectory = Path.Combine(baseDirectory, importFilePath);

                    CopyFilesFromImportDirectory(filePathimportDirectory);

                    var importdownloadDirectorypathfile = Path.Combine(baseDirectory, downloadDirectory);

                    try
                    {
                        var myDataEntryList = GetSortedFileList(importdownloadDirectorypathfile);

                        if (myDataEntryList.Count > 0)
                        {
                            ProcessFiles(myDataEntryList);
                            DeleteImportFiles(filePathimportDirectory); // Delete all existing files from Import folder after output file generate.
                        }
                        else
                        {
                            LogToErrorFile("File not found in ImportFile Folder.");
                            Console.WriteLine("File not found in ImportFile Folder.");
                        }
                    }
                    catch (Exception ex)
                    {
                        LogToErrorFile(ex.Message);
                        StartConsoleWriting(ex.Message);
                        throw;
                    }
                    finally
                    {
                        StartConsoleWriting("Run Successfully...");
                        Thread.Sleep(2000);
                    }
                }


                StartConsoleWriting(res);
                LogToErrorFile(res);

            }
            catch (Exception ex)
            {
                StartConsoleWriting(ex.Message);
                LogToErrorFile(ex.Message);
            }
        }

        // Indicates that the system should not call the Finalize() method on
        [MethodImpl(MethodImplOptions.InternalCall)]
        private static extern void _SuppressFinalize(object o);
        public static void SuppressFinalize(object obj)
        {
            if (obj == null)
                throw new ArgumentNullException(nameof(obj));
            _SuppressFinalize(obj);
        }
        private void DeleteImportFiles(string importDirectory)
        {
            if (Directory.Exists(importDirectory))
            {
                DeleteFileIfNeeded(importDirectory); // Delete all existing files from Import folder after output file generate.
            }
        }

        public static bool DeleteFileIfNeeded(string path)
        {
            bool result = true;
            try
            {
                if (Directory.Exists(path))
                {
                    try
                    {
                        foreach (string newPath in Directory.GetFiles(path, "*.*", System.IO.SearchOption.AllDirectories))
                        {
                            if (!string.IsNullOrEmpty(newPath))
                            {
                                System.IO.File.Delete(newPath);
                            }
                        }
                        Console.WriteLine("File delete from importfile folder.");
                    }
                    catch (Exception)
                    {
                        result = false;
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
            }
            return result;
        }
        private void ProcessFiles(List<FileInfo> fileList)
        {
            try
            {
                var dailyActivityFile = fileList.FirstOrDefault(t => t.Name.ToUpper().Contains("Global".ToUpper()) && IsCsvFile(t));
                ProcessFile(dailyActivityFile, dailyActivitySheetName, "Daily Activity file not found.");
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
            }
        }

        private void ProcessFile(FileInfo file, string sheetName, string notFoundMessage)
        {
            try
            {
                if (file != null)
                {
                    var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(file.Name);
                    if (fileNameWithoutExtension.Contains("Global"))
                    {
                        dailyActivitySheetName = fileNameWithoutExtension;
                        sheetName = dailyActivitySheetName;
                    }

                    if (!string.IsNullOrEmpty(dailyActivitySheetName) && fileNameWithoutExtension.ToUpper().Contains(sheetName.ToUpper()))
                    {
                        string outputFilePath = CreateExcelForDailyPatientSiteFile(file, fileNameWithoutExtension);
                        if (!string.IsNullOrEmpty(outputFilePath))
                        {
                            InsertIntoDatabase(outputFilePath, sheetName); // Insert data into database after creating Excel
                        }
                    }
                }
                else
                {
                    LogToErrorFile(notFoundMessage);
                    Console.WriteLine(notFoundMessage);
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
            }
        }

        public string CreateExcelForDailyPatientSiteFile(FileInfo aAPCSRFile, string sheetName)
        {
            string outputFilePath = string.Empty;
            try
            {
                using (var workbook = new XSSFWorkbook())
                {
                    string sourcefile = aAPCSRFile?.ToString() ?? string.Empty;

                    outputFilePath = Path.Combine(exportDirectory, $"{sheetName} {getMonthYear} {currentDateTime}.xlsx");
                    if (!string.IsNullOrEmpty(sheetName))
                    {
                        ISheet sheet = workbook.CreateSheet(sheetName); // Create a blank sheet

                        if (!string.IsNullOrEmpty(sourcefile))
                        {
                            LoadDailyPatientSiteCsvData(sourcefile, sheet, workbook, sheetName);  // Load data from csv file and insert into blank sheet
                        }

                        using (FileStream stream = new FileStream(outputFilePath, FileMode.Create, FileAccess.Write)) // Save the workbook to an XLSX file
                        {
                            workbook.Write(stream);
                        }
                        Console.WriteLine(sheetName + "...csv file copied to XLSX successfully...");
                    }
                    else
                    {
                        StartConsoleWriting("Sheet name is null or empty.");
                    }
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
            }
            return outputFilePath;
        }

        private void InsertIntoDatabase(string excelFilePath, string sheetName)
        {
            if (string.IsNullOrEmpty(sheetName))
            {
                LogToErrorFile("Sheet name is null or empty.");
                return;
            }

            try
            {
                using (SqlConnection connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))
                {
                    connection.Open();

                    string query = @"INSERT into OutputFileDetails (Date, Agent, TimesheetOwner, TotalTalkingTime)
                             values (@Date, @Agent, @TimesheetOwner, @TotalTalkingTime)";

                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        using (var workbook = new XSSFWorkbook(File.Open(excelFilePath, FileMode.Open, FileAccess.Read)))
                        {
                            ISheet sheet = workbook.GetSheet(sheetName);

                            if (sheet == null)
                            {
                                LogToErrorFile($"Sheet '{sheetName}' not found in workbook.");
                                return;
                            }

                            for (int i = 1; i <= sheet.LastRowNum; i++)
                            {
                                var row = sheet.GetRow(i);
                                if (row == null)
                                {
                                    LogToErrorFile($"Row {i} is null.");
                                    continue;
                                }

                                DateTime date = (DateTime)row.GetCell(0).DateCellValue;
                                string agent = row.GetCell(1).StringCellValue;
                                string timesheetOwner = row.GetCell(2).StringCellValue;
                                string totalTalkingTime = row.GetCell(3).StringCellValue;

                                command.Parameters.Clear();
                                command.Parameters.AddWithValue("@Date", date);
                                command.Parameters.AddWithValue("@Agent", agent);
                                command.Parameters.AddWithValue("@TimesheetOwner", timesheetOwner);
                                command.Parameters.AddWithValue("@TotalTalkingTime", totalTalkingTime);

                                command.ExecuteNonQuery();
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
            }
        }
        public void LoadDailyPatientSiteCsvData(string filePath, ISheet sheet, XSSFWorkbook workbook, string sheetName)
        {
            try
            {
                XSSFCellStyle numberStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                numberStyle.DataFormat = workbook.CreateDataFormat().GetFormat("General");

                XSSFCellStyle dateStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                dateStyle.DataFormat = workbook.CreateDataFormat().GetFormat("dd-MM-yyyy");

                XSSFCellStyle timeStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                timeStyle.DataFormat = workbook.CreateDataFormat().GetFormat("hh:mm:ss");

                using (TextFieldParser reader = new TextFieldParser(filePath))
                {
                    reader.HasFieldsEnclosedInQuotes = true;
                    reader.SetDelimiters("\t");

                    int rowIndex = 0;

                    while (!reader.EndOfData)
                    {
                        var valueLines = reader.ReadFields();
                        if (rowIndex == 0)
                        {
                            CreateHeaderRow(sheet, numberStyle);
                            rowIndex++;
                        }
                        else if (int.TryParse(valueLines[0].Split(' ')[0], out _)) // Check if the first part is numeric
                        {
                            ProcessDataRows(sheet, rowIndex, valueLines, dateStyle, numberStyle, timeStyle);
                            rowIndex++;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
                throw;
            }
        }

        void CreateHeaderRow(ISheet sheet, XSSFCellStyle style)
        {
            try
            {
                // Create a new row at the top of the sheet for the header
                var headerRow = sheet.CreateRow(0);

                // Define the headers
                string[] headers = { "Date", "Agent", "TimesheetOwner", "Total Talking time" };

                // Loop through each header and create a cell in the header row
                for (int i = 0; i < headers.Length; i++)
                {
                    var cell = headerRow.CreateCell(i);
                    cell.SetCellValue(headers[i]); // Set the header text
                    cell.CellStyle = style; // Apply the style to the cell
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
            }
        }

        void ProcessDataRows(ISheet sheet, int rowIndex, string[] valueLines, XSSFCellStyle dateStyle, XSSFCellStyle numberStyle, XSSFCellStyle timeStyle)
        {
            try
            {
                // Extracting values from the input line
                string[] columns = valueLines[0].Split('\t'); // Split by tab to separate columns
                string agentValue = columns[0].Split(' ')[0]; // Extract numeric agent value

                // Extract non-numeric part of the first column as TimesheetOwner value
                string timesheetOwnerValue = ExtractCharacterValues(columns[0]);

                // Remove commas from TimesheetOwner value
                timesheetOwnerValue = timesheetOwnerValue.Replace(",", "");
                timesheetOwnerValue = timesheetOwnerValue.Replace("::", ""); // Remove any extra :: characters

                // Extract value after the last comma for totalTalkingTimeValue
                string totalTalkingTimeValue = ExtractTotalTalkingTime(valueLines[0]);

                // Create a new row for data
                var dataRow = sheet.CreateRow(rowIndex);

                // Setting Date cell with current date
                var dateCell = dataRow.CreateCell(0);
                dateCell.SetCellValue(DateTime.Today); // Assuming you want today's date
                dateCell.CellStyle = dateStyle;

                // Setting Agent cell
                var agentCell = dataRow.CreateCell(1);
                agentCell.SetCellValue(agentValue);
                agentCell.CellStyle = numberStyle;

                // Setting TimesheetOwner cell
                var timesheetOwnerCell = dataRow.CreateCell(2);
                timesheetOwnerCell.SetCellValue(timesheetOwnerValue);
                timesheetOwnerCell.CellStyle = numberStyle; // Apply appropriate style as needed

                // Setting Total Talking time cell
                var totalTalkingTimeCell = dataRow.CreateCell(3);
                totalTalkingTimeCell.SetCellValue(totalTalkingTimeValue);
                totalTalkingTimeCell.CellStyle = timeStyle;

                // Method to extract character values from a string and remove commas
                static string ExtractCharacterValues(string input)
                {
                    StringBuilder result = new StringBuilder();
                    foreach (char c in input)
                    {
                        if (!char.IsDigit(c) && c != '\t' && c != ',')
                        {
                            result.Append(c);
                        }
                    }
                    return result.ToString().Trim();
                }

                // Method to extract value after the last comma for total talking time
                static string ExtractTotalTalkingTime(string input)
                {
                    // Split by comma and take the last part
                    string[] parts = input.Split(',');
                    if (parts.Length > 1)
                    {
                        return parts[parts.Length - 1].Trim();
                    }
                    else
                    {
                        return "";
                    }
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
            }
        }           

        public static bool IsCsvFile(FileInfo file)
        {
            return file.Extension.ToUpper() == ".CSV";
        }
        public static List<FileInfo> GetSortedFileList(string directoryPath)
        {
            try
            {
                var directory = new DirectoryInfo(directoryPath);
                return (from f in directory.GetFiles()
                        orderby f.LastWriteTime descending
                        select f).ToList();
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                return null;
            }
        }
        public static void StartConsoleWriting(string Message)
        {
            Console.WriteLine(Message);
            Thread.Sleep(5000);
        }
        public static void LogToErrorFile(string ErrorMsg)
        {
            try
            {
                CreateFolderIfNeeded(errorLogFilePath);

                string path = errorLogFilePath + @"\DataEntryBOT.txt";

                using (StreamWriter sw = (File.Exists(path)) ? File.AppendText(path) : File.CreateText(path))
                {
                    sw.WriteLine(ErrorMsg + Environment.NewLine);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        public static bool CreateFolderIfNeeded(string path)
        {
            bool result = true;
            if (!Directory.Exists(path))
            {
                try
                {
                    Directory.CreateDirectory(path);
                }
                catch (Exception)
                {
                    result = false;
                }
            }
            return result;
        }

        public void CopyFilesFromImportDirectory(string importDirectory)
        {
            if (Directory.Exists(importDirectory))
            {
                CopyFilesRecursively(importDirectory, downloadDirectory, baseDirectory);
            }
        }

        public static void CopyFilesRecursively(string sourcePath, string targetPath, string baseDirectory)
        {
            try
            {
                foreach (string newPath in Directory.GetFiles(sourcePath, "*.*", System.IO.SearchOption.AllDirectories))
                {
                    FileInfo mFile = new FileInfo(newPath);
                    if (new FileInfo(sourcePath.Replace(sourcePath, targetPath) + "\\" + mFile.Name).Exists == false)
                    {
                        mFile.CopyTo(sourcePath.Replace(sourcePath, targetPath) + "\\" + mFile.Name);
                    }
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
                throw;
            }
        }
        public static void CreateDirectoryIfNotExists(string directory)
        {
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
        }
        public static string GetIPAddress()
        {
            try
            {
                IPHostEntry ipEntry = Dns.GetHostEntry(Dns.GetHostName());
                System.Net.IPAddress[] addr = ipEntry.AddressList;
                string ip = addr[addr.Length - 1].ToString();
                return ip;
            }
            catch
            {
                return "";
            }
        }
    }

}
