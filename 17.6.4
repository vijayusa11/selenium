Below is the complete code to read the input, process it, and format the output as specified:

```csharp
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using Microsoft.VisualBasic.FileIO;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;

namespace MedsolPhoneEntry
{
    public class WebScraping : IDisposable
    {
        public string downloadDirectory = string.Empty;
        public static string exportDirectory = string.Empty;
        string dailyActivitySheetName = string.Empty;
        string outputFilePath = string.Empty;
        string currentDateTime = DateTime.Now.ToString("hhmmss");
        public static string? importFilePath = Convert.ToString(ConfigurationManager.AppSettings["ImportFilePath"]);
        public static string? exportFilePath = Convert.ToString(ConfigurationManager.AppSettings["ExportFilePath"]);
        public static string? errorLogFilePath = Convert.ToString(ConfigurationManager.AppSettings["ErrorLogFilePath"]);
        DateTime currentMonthYear = System.DateTime.Now;
        string? getMonthYear = string.Empty;
        string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
        int rowIndexColumn = 0;
        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }

        public void StartPhoneEntryProcess(string[] args)
        {
            try
            {
                string mAddress = GetIPAddress();
                StartConsoleWriting("Start BOT");

                string filePathdownloadDirectory = Path.Combine(baseDirectory, exportFilePath);
                string filePathexportDirectory = Path.Combine(baseDirectory, exportFilePath);

                downloadDirectory = Path.Combine(filePathdownloadDirectory == null ? "" : filePathdownloadDirectory, DateTime.Now.ToString("ddMMyyyy"), DateTime.Now.ToString("hhmmss"), "OriginalBOTFiles");

                exportDirectory = Path.Combine(filePathexportDirectory == null ? "" : filePathexportDirectory, DateTime.Now.ToString("ddMMyyyy"), DateTime.Now.ToString("hhmmss"), "ProcessedBOTFiles");

                getMonthYear = currentMonthYear.ToString("dd-MM-yyyy");

                API aPI = new API();
                var res = aPI.CheckLicense(mAddress);

                CreateDirectoryIfNotExists(downloadDirectory);
                CreateDirectoryIfNotExists(exportDirectory);

                if (importFilePath != null)
                {
                    string filePathimportDirectory = Path.Combine(baseDirectory, importFilePath);

                    CopyFilesFromImportDirectory(filePathimportDirectory);

                    var importdownloadDirectorypathfile = Path.Combine(baseDirectory, downloadDirectory);

                    try
                    {
                        var myDataEntryList = GetSortedFileList(importdownloadDirectorypathfile);

                        if (myDataEntryList.Count > 0)
                        {
                            ProcessFiles(myDataEntryList);
                            DeleteImportFiles(filePathimportDirectory); // Delete all existing files from Import folder after output file generate.
                        }
                        else
                        {
                            LogToErrorFile("File not found in ImportFile Folder.");
                            Console.WriteLine("File not found in ImportFile Folder.");
                        }
                    }
                    catch (Exception ex)
                    {
                        LogToErrorFile(ex.Message);
                        StartConsoleWriting(ex.Message);
                        throw;
                    }
                    finally
                    {
                        StartConsoleWriting("Run Successfully...");
                        Thread.Sleep(2000);
                    }
                }


                StartConsoleWriting(res);
                LogToErrorFile(res);

            }
            catch (Exception ex)
            {
                StartConsoleWriting(ex.Message);
                LogToErrorFile(ex.Message);
            }
        }

        public void LoadDailyPatientSiteCsvData(string filePath, ISheet sheet, XSSFWorkbook workbook, string sheetName)
        {
            try
            {
                XSSFCellStyle numberStyle2 = (XSSFCellStyle)workbook.CreateCellStyle();
                numberStyle2.DataFormat = workbook.CreateDataFormat().GetFormat(string.Format("General"));

                XSSFCellStyle numberStyle3 = (XSSFCellStyle)workbook.CreateCellStyle();
                numberStyle3.DataFormat = workbook.CreateDataFormat().GetFormat(string.Format("dd-mm-yyyy"));

                using (TextFieldParser reader = new TextFieldParser(filePath))
                {
                    reader.HasFieldsEnclosedInQuotes = true;
                    reader.SetDelimiters("\t");

                    var (rowIndex, columnSeprated, columnG, columnH, columnJ, columnK, columnL, columnI, columnM, columnN, columnO, columnP, columnQ, columnR, columnS, columnT, columnU, columnV, columnW, columnX) = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

                    while (!reader.EndOfData)
                    {
                        var value_lines = reader.ReadFields();
                        int startColumnIndex = 0;
                        int[] intArray;

                        if (rowIndex == 0 && value_lines != null)
                        {
                            int endColumnIndex = Math.Min(25, value_lines.Length - 1);

                            if (sheetName == dailyActivitySheetName)
                            {
                                for (int i = 0; i <= endColumnIndex; i++)
                                {
                                    string value = value_lines[i].ToString().Trim();

                                    if (sheetName == dailyActivitySheetName)
                                    {
                                        switch (value.ToUpper().Replace(" ", ""))
                                        {
                                            case "LOCATION": columnG = i; break;
                                            case "ENDOSCOPIST'SDETAILS": columnH = i; break;
                                            case "ROOM": columnI = i; break;
                                            case "SESSION": columnJ = i; break;
                                            case "GMCNUMBER": columnK = i; break;
                                            case "NURSE1": columnM = i; break;
                                            case "NURSE2": columnN = i; break;
                                            case "DATE": columnU = i; break;
                                            case "ACTIVITIES": columnSeprated = i; break;
                                        }
                                    }
                                }
                            }
                        }

                        intArray = sheetName switch
                        {
                            string s when s == dailyActivitySheetName => new int[] { columnG, columnH, columnI, columnJ, columnK, columnM, columnN, columnU, columnSeprated },
                            _ => new int[0] //default case
                        };

                        if (intArray.Length > 0)
                        {
                            if (rowIndex == 0)
                            {
                                CreateHeaderRow(sheet, rowIndex, value_lines, intArray, startColumnIndex, columnSeprated, sheetName, numberStyle2);
                            }
                            else
                            {
                                ProcessDataRows(sheet, rowIndex, value_lines, intArray, startColumnIndex, columnSeprated, sheetName, numberStyle2, numberStyle3);
                            }

                            rowIndex = (rowIndex == 0) ? 1 : rowIndexColumn;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
                throw;
            }
        }

        void CreateHeaderRow(ISheet sheet, int rowIndex, string[] value_lines, int[] intArray, int startColumnIndex, int columnSeprated, string sheetName, XSSFCellStyle numberStyle2)
        {
            try
            {
                var dataRow = sheet.CreateRow(rowIndex);
                foreach (int i in intArray)
                {
                    if (i != columnSeprated)
                    {
                        dataRow.CreateCell(startColumnIndex).SetCellValue(value_lines[i].ToString());
                        ICell newCell1 = dataRow.GetCell(startColumnIndex);
                        newCell1.CellStyle = numberStyle2;
                        startColumnIndex++;
                    }
                    else
                    {
                        string[] activityAnotherColumn = { };

                        if (sheetName == dailyActivitySheetName)
                        {
                            activityAnotherColumn = new string[] { "NHS Number", "Planned Procedure", "Outcome", "MDT", "Specimen Taken", "D2 Intubation", "CLO Test", "Caecal Intubation", "Polypectomy", "Withdrawal Time", "Follow-Up Required", "Referral Made" };
                        }

                        foreach (string items in activityAnotherColumn)
                        {
                            dataRow.CreateCell(startColumnIndex).SetCellValue(items);
                            ICell newCell1 = dataRow.GetCell(startColumnIndex);
                            newCell1.CellStyle = numberStyle2;
                            startColumnIndex++;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
            }
        }
        void ProcessDataRows(ISheet sheet, int rowIndex, string[] value_lines, int[] intArray, int startColumnIndex, int columnSeprated, string sheetName, XSSFCellStyle numberStyle2, XSSFCellStyle numberStyle3)
        {
            try
            {
                string[] values = value_lines[columnSeprated].ToString().Split('\n').Select(sValue => sValue.Trim()).ToArray();

                if (values.Length > 0)
                {
                    foreach (string valueItem in values)
                    {
                        var dataRow1 = sheet.CreateRow(rowIndex);

                        string[] calData = valueItem.Split(':').Select(sValue => sValue.Trim()).ToArray();

                        int createIndexCell = 0;

                        foreach (int i in intArray)
                        {
                            if (i != columnSeprated)
                            {
                                if (DateTime.TryParse(value_lines[i], out DateTime dateValue))
                                {
                                    dataRow1.CreateCell(createIndexCell).SetCellValue(dateValue);
                                    ICell newCell1 = dataRow1.GetCell