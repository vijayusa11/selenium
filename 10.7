To integrate the Azure attachment code into your existing `SaveContractorEmailNote` method, you need to determine where in the flow you want to handle the Azure upload. Given the structure of your method, it seems you want to upload attachments to Azure after they are saved locally.

Below is the modified code with the Azure attachment handling integrated:

```csharp
public ResponseModel<bool> SaveContractorEmailNote(HttpRequest emailNoteRequest)
{
    var generalConfiguration = _commonService.GetGeneralConfiguration();
    List<Attachments> sendAttachment = new List<Attachments>();
    EmailNoteDto emailNote = new EmailNoteDto()
    {
        EmailNoteId = 0,
        ContractorId = Convert.ToInt32(emailNoteRequest["ContractorId"].ToString()),
        Subject = emailNoteRequest["Subject"].ToString(),
        Body = emailNoteRequest.Unvalidated["Body"].ToString(),
        FromEmail = emailNoteRequest["FromEmail"].ToString(),
        ToEmail = emailNoteRequest["ToEmail"].ToString(),
        CCEmail = emailNoteRequest["CCEmail"].ToString() == "null" ? "" : emailNoteRequest["CCEmail"].ToString(),
        EmailStatusId = Convert.ToInt16(EmailStatus.Pending),
        Excepton = "",
        InnerException = "",
        StackTrace = "",
        CreatedDate = DateTime.Now,
        NoteId = 0,
        ContractorSubject = emailNoteRequest["Subject"].ToString(),
        Note = emailNoteRequest.Unvalidated["Body"].ToString(),
        CreatedBy = _commonService.GetUserId(),
        PhoneNoteId = 0,
        MannualNoteId = 0,
        NoteTypeId = Convert.ToInt16(NoteType.EmailNote),
    };
    Int64 emailNoteId = _contractorRepository.SaveContractorEmailNote(emailNote);

    if (emailNoteId > 0)
    {
        if (emailNoteRequest.Files.Count > 0)
        {
            HttpPostedFile attachmentFile = emailNoteRequest.Files[0];
            if (attachmentFile != null)
            {
                string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";

                EmailNoteAttachmentDto emailNoteAttachment = new EmailNoteAttachmentDto()
                {
                    EmailNoteAttachmentId = 0,
                    EmailNoteId = emailNoteId,
                    FileName = attachmentFile.FileName.ToString(),
                    FilePath = "~//Upload/ContractorEmailNote/" + Datefolderpath + emailNoteId.ToString() + "/"
                };
                Int64 attachmentId = _commonService.SaveEmailNoteAttachment(emailNoteAttachment);

                var folderPath = HttpContext.Current.Server.MapPath("~//Upload/ContractorEmailNote/" + Datefolderpath + emailNoteId.ToString() + "/" + attachmentId.ToString());
                CreateFolderIfNeeded(folderPath);
                attachmentFile.SaveAs(Path.Combine(folderPath, attachmentFile.FileName));
                sendAttachment.Add(new Attachments()
                {
                    FileName = attachmentFile.FileName.ToString(),
                    FilePath = Path.Combine(folderPath, attachmentFile.FileName)
                });

                // Azure attachment code
                if (ConfigurationManager.AppSettings["Azure_Attachment"] == "1")
                {
                    BLAzureCommonAPI bLAzureCommonAPI = new BLAzureCommonAPI();
                    string filename11 = "UploadedFiles/" + _commonService.GetUserId().ToString();
                    AzureSaveSingleFileDto azureSaveSingleFile = new AzureSaveSingleFileDto()
                    {
                        ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"],
                        FileName = attachmentFile.FileName,
                        SavePath = filename11,
                        FileBytes = bLAzureCommonAPI.ConvertFilePathToByte(Path.Combine(folderPath, attachmentFile.FileName), true)
                    };
                    bLAzureCommonAPI.SaveSingleFile(azureSaveSingleFile);
                }
            }
        }

        string attachmentIds = emailNoteRequest["attachmentIds"];
        if (!String.IsNullOrEmpty(attachmentIds))
        {
            Int16 templateId = Convert.ToInt16(emailNoteRequest["TemplateId"].ToString());
            var templateAttachments = _templateRepository.GetTemplateAttachment(templateId);
            string[] arr = attachmentIds.Split(',');
            foreach (var item in arr)
            {
                var attachments = templateAttachments.Find(t => t.TemplateAttachmentId == Convert.ToInt16(item));

                string Datefolderpath = DateTime.Now.Year + "/" + DateTime.Now.Month + "/" + DateTime.Now.Day + "/";

                EmailNoteAttachmentDto emailNoteAttachment = new EmailNoteAttachmentDto()
                {
                    EmailNoteAttachmentId = 0,
                    EmailNoteId = emailNoteId,
                    FileName = attachments.FileName,
                    FilePath = "~//Upload/ContractorEmailNote/" + Datefolderpath + emailNoteId.ToString() + "/"
                };
                Int64 attachmentId = _commonService.SaveEmailNoteAttachment(emailNoteAttachment);

                var folderPath = HttpContext.Current.Server.MapPath("~//Upload/ContractorEmailNote/" + Datefolderpath + emailNoteId.ToString() + "/" + attachmentId.ToString());
                CreateFolderIfNeeded(folderPath);

                if (File.Exists(HttpContext.Current.Server.MapPath(attachments.FilePath)))
                {
                    System.IO.File.Copy(HttpContext.Current.Server.MapPath(attachments.FilePath), folderPath + "/" + attachments.FileName, true);
                    sendAttachment.Add(new Attachments()
                    {
                        FileName = attachments.FileName.ToString(),
                        FilePath = folderPath + "/" + attachments.FileName
                    });

                    // Azure attachment code
                    if (ConfigurationManager.AppSettings["Azure_Attachment"] == "1")
                    {
                        BLAzureCommonAPI bLAzureCommonAPI = new BLAzureCommonAPI();
                        string filename11 = "UploadedFiles/" + _commonService.GetUserId().ToString();
                        AzureSaveSingleFileDto azureSaveSingleFile = new AzureSaveSingleFileDto()
                        {
                            ProjectCode = ConfigurationManager.AppSettings["Azure_Project_Code"],
                            FileName = attachments.FileName,
                            SavePath = filename11,
                            FileBytes = bLAzureCommonAPI.ConvertFilePathToByte(folderPath + "/" + attachments.FileName, true)
                        };
                        bLAzureCommonAPI.SaveSingleFile(azureSaveSingleFile);
                    }
                }
            }
        }
    }

    return _commonService.ReturnResponse(true, true, "Email send successfully.");
}
```

### Explanation

1. **Azure Attachment Integration**:
   - Added a check for the Azure attachment setting (`ConfigurationManager.AppSettings["Azure_Attachment"] == "1"`).
   - If Azure attachment is enabled, it creates an instance of `BLAzureCommonAPI`.
   - Constructs the `AzureSaveSingleFileDto` object with the necessary details.
   - Converts the file path to bytes and uploads the file to Azure using `SaveSingleFile` method.

2. **Placement**:
   - Placed the Azure attachment code after saving each file locally to ensure that the file exists before attempting to upload it to Azure.

This way, the code will handle both local storage and Azure uploads as per the configuration settings.